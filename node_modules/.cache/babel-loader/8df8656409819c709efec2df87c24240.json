{"ast":null,"code":"var _jsxFileName = \"D:\\\\GidHub Progects\\\\REACT\\\\goit-react-hw-03-phonebook\\\\src\\\\components\\\\filter\\\\filter.js\";\nimport s from './filter.module.css';\nimport propTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Filter(_ref) {\n  let {\n    options,\n    eventHandler\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: s.filter_label,\n    children: [\"Find contacts by name\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: s.filter_form,\n      type: \"text\",\n      name: \"filter\",\n      value: options,\n      onChange: eventHandler,\n      pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n      title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = Filter;\nFilter.propTypes = {\n  eventHandler: propTypes.func.isRequired,\n  options: propTypes.string.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Filter\");","map":{"version":3,"sources":["D:/GidHub Progects/REACT/goit-react-hw-03-phonebook/src/components/filter/filter.js"],"names":["s","propTypes","Filter","options","eventHandler","filter_label","filter_form","func","isRequired","string"],"mappings":";AAAA,OAAOA,CAAP,MAAc,qBAAd;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,eAAe,SAASC,MAAT,OAA2C;AAAA,MAA3B;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAA2B;AACxD,sBACE;AAAO,IAAA,SAAS,EAAEJ,CAAC,CAACK,YAApB;AAAA,qDAEE;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AACE,MAAA,SAAS,EAAEL,CAAC,CAACM,WADf;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,KAAK,EAAEH,OAJT;AAKE,MAAA,QAAQ,EAAEC,YALZ;AAME,MAAA,OAAO,EAAC,wHANV;AAOE,MAAA,KAAK,EAAC;AAPR;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;KAhBuBF,M;AAkBxBA,MAAM,CAACD,SAAP,GAAmB;AACjBG,EAAAA,YAAY,EAAEH,SAAS,CAACM,IAAV,CAAeC,UADZ;AAEjBL,EAAAA,OAAO,EAAEF,SAAS,CAACQ,MAAV,CAAiBD;AAFT,CAAnB","sourcesContent":["import s from './filter.module.css';\r\nimport propTypes from 'prop-types';\r\n\r\nexport default function Filter({ options, eventHandler }) {\r\n  return (\r\n    <label className={s.filter_label}>\r\n      Find contacts by name\r\n      <br />\r\n      <input\r\n        className={s.filter_form}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={options}\r\n        onChange={eventHandler}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  eventHandler: propTypes.func.isRequired,\r\n  options: propTypes.string.isRequired,\r\n};"]},"metadata":{},"sourceType":"module"}